{"version":3,"file":"static/js/9813.a2565685.chunk.js","mappings":"8MAyBaA,GAAcC,EAAAA,EAAAA,eAAc,CAAC,GAE7BC,GAAQC,EAAAA,EAAAA,aACnB,SAACC,EAAkDC,G,IAAhDC,EAAQF,EAAAE,SAAEC,EAAaH,EAAAG,cAAEC,EAASJ,EAAAI,UAAEC,EAAQL,EAAAK,SACvCC,GAAKC,EAAAA,EAAAA,SACLC,GAAqCC,EAAAA,EAAAA,UAASN,GAA7CO,EAAcF,EAAA,GAAEG,EAAgBH,EAAA,GAMvC,OAJAI,EAAAA,EAAAA,YAAU,WACRF,GAAkBL,GAAYA,EAASK,EACzC,GAAG,CAACA,IAGFG,EAAAA,cAACjB,EAAYkB,SAAQ,CAACC,MAAO,CAAEL,eAAcA,EAAEC,iBAAgBA,EAAEL,GAAEA,IACjEO,EAAAA,cAAA,OAAKT,WAAWY,EAAAA,EAAAA,GAAW,OAAQZ,GAAYH,IAAKA,GACjDC,GAIT,IAGFJ,EAAMmB,UAAY,CAChBd,cAAee,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAAmBC,WACzEjB,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXb,SAAUa,IAAAA,MAGZpB,EAAMsB,YAAc,Q,kCC/BPC,GAAWtB,EAAAA,EAAAA,aACtB,SAACC,EAAmDC,G,MAAjDC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAEkB,EAAMtB,EAAAsB,OAAEC,EAAOvB,EAAAuB,QAAKC,GAAIC,EAAAA,EAAAA,IAAAzB,EAA/C,6CACO0B,GAAaC,EAAAA,EAAAA,QAAuB,MACpCC,GAAYC,EAAAA,EAAAA,IAAa5B,EAAKyB,GAsCpC,OACEb,EAAAA,cACE,OAAAiB,EAAAA,EAAAA,IAAA,CAAA1B,WAAWY,EAAAA,EAAAA,GACT,OAAKR,EAAA,GAEHA,EAAC,OAAOuB,OAAAT,IAAWA,EACnBd,EAAC,OAAOuB,OAAAR,IAAYA,EAEtBf,GAAAJ,GAEF4B,KAAK,UACLC,UA/CkB,SAACC,GACrB,GACyB,OAAvBR,EAAWS,UACI,cAAdD,EAAME,KACS,YAAdF,EAAME,KACQ,cAAdF,EAAME,KACQ,eAAdF,EAAME,KACQ,SAAdF,EAAME,KACQ,QAAdF,EAAME,KACR,CACAF,EAAMG,iBACN,IAAMC,EAASJ,EAAMI,OAEfC,EAAuBC,MAAMC,KACjCf,EAAWS,QAAQO,iBAAiB,4CAGlCC,OAAiB,GAGnBA,EADgB,SAAdT,EAAME,KAAgC,QAAdF,EAAME,IACE,QAAdF,EAAME,IAAgBG,EAAMK,IAAI,GAAKL,EAAM,IAE3CM,EAAAA,EAAAA,GAClBN,EACAD,EACc,cAAdJ,EAAME,KAAqC,eAAdF,EAAME,KACnC,KAKFO,EAAkBG,MAAM,CAAEC,eAAe,G,CAG/C,EAcI9C,IAAK2B,GACDJ,GAEHtB,EAGP,IAGFmB,EAASJ,UAAY,CACnBf,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXI,OAAQJ,IAAAA,MAAgB,CAAC,OAAQ,cACjCK,QAASL,IAAAA,MAAgB,CAAC,QAAS,OAAQ,YAAa,sBAG1DG,EAASD,YAAc,W,ICtEV4B,GAAOjD,EAAAA,EAAAA,aAClB,SAACC,EAA2CC,GAAzC,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAE6C,EAAOjD,EAAAiD,QAAKzB,GAAnCC,EAAAA,EAAAA,IAAAzB,EAAA,oCACOQ,GAA2C0C,EAAAA,EAAAA,YAAWtD,GAApDc,EAAcF,EAAAE,eAAEC,EAAgBH,EAAAG,iBAAEL,EAAEE,EAAAF,GAEtC6C,EAAW,WAAM,OAAAF,IAAYvC,CAAZ,EAEvB,OACEG,EAAAA,cACE,UAAAiB,EAAAA,EAAAA,IAAA,CAAA1B,WAAWY,EAAAA,EAAAA,GACT,WACA,CACEoC,OAAQD,KAEV/C,GAEFE,GAAI,GAAGyB,OAAAzB,GAAKyB,OAAAkB,EAAO,QACnBI,QAAS,WAAM,OAAA1C,EAAiBsC,EAAjB,EACfK,QAAS,WAAM,OAAA3C,EAAiBsC,EAAQ,EACxCjB,KAAK,MACLuB,SAAUJ,IAAa,GAAK,EAC5BK,KAAK,SAAQ,gBACE,GAAGzB,OAAAzB,GAAEyB,OAAGkB,EAAO,aACf,gBAAAE,IACflD,IAAKA,GACDuB,GAEHtB,EAGP,IAGF8C,EAAK/B,UAAY,CACff,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXuC,SAAUvC,IAAAA,KACV+B,QAAS/B,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAAmBC,YAGrE6B,EAAK5B,YAAc,O,iCCxBNsC,GAAY3D,EAAAA,EAAAA,aACvB,SAACC,EAAuFC,GAArF,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAE6C,EAAOjD,EAAAiD,QAAEU,EAAM3D,EAAA2D,OAAEC,EAAM5D,EAAA4D,OAAEpD,EAAAR,EAAA6D,WAAAA,OAAa,IAAArD,GAAIA,EAAEsD,EAAO9D,EAAA8D,QAAKtC,GAA/EC,EAAAA,EAAAA,IAAAzB,EAAA,6EACO+D,GAAyBb,EAAAA,EAAAA,YAAWtD,GAAlCc,EAAcqD,EAAArD,eAAEJ,EAAEyD,EAAAzD,GAEpB0D,GAAarC,EAAAA,EAAAA,UACbC,GAAYC,EAAAA,EAAAA,IAAa5B,EAAK+D,GAE9BC,GAAyBxD,EAAAA,EAAAA,UAASqD,GAAWpD,IAAmBuC,GAA/DiB,EAAQD,EAAA,GAAEE,EAAUF,EAAA,GAU3B,OARArD,EAAAA,EAAAA,YAAU,gBACIwD,IAAZN,GAAyBK,EAAWL,EACtC,GAAG,CAACA,KAEJlD,EAAAA,EAAAA,YAAU,WACRuD,EAAWzD,IAAmBuC,EAChC,GAAG,CAACvC,IAGFG,EAAAA,cAACwD,EAAAA,GAAU,CACTC,GAAIJ,EACJK,QAASP,EACTQ,QAASZ,EACTa,OAAQd,EACRe,QAASV,EAAW7B,SAAUwC,EAAAA,EAAAA,GAAiCX,EAAW7B,SAAW,IAEpF,SAACyC,GAAU,OACV/D,EAAAA,cAAA,OAAAiB,EAAAA,EAAAA,IAAA,CACE1B,WAAWY,EAAAA,EAAAA,GACT,WACA,CACEoC,OAAQc,EACRW,KAAMhB,EACNiB,KAAgB,YAAVF,GAERxE,GAEFE,GAAI,GAAAyB,OAAGzB,GAAEyB,OAAGkB,EAAO,aACnBjB,KAAK,WACY,qBAAAD,OAAGzB,GAAKyB,OAAAkB,EAAa,QACtCM,SAAU,EACVtD,IAAK2B,GACDJ,GAEHtB,EACG,GAId,IAGFwD,EAAUzC,UAAY,CACpBf,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACX+B,QAAS/B,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAAmBC,WACnEwC,OAAQzC,IAAAA,KACR0C,OAAQ1C,IAAAA,KACR2C,WAAY3C,IAAAA,KACZ4C,QAAS5C,IAAAA,MAGXwC,EAAUtC,YAAc,Y,uBClFxB,MAyNA,EAzNa2D,KAETC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAA/E,SAAA,EACHgF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGlF,UACX8E,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACjF,UAAU,OAAMF,SAAA,EACrBgF,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CAAApF,UACVgF,EAAAA,EAAAA,KAAA,UAAAhF,SAAQ,kBAEV8E,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAArF,SAAA,EACR8E,EAAAA,EAAAA,MAAA,KAAG5E,UAAU,4BAA2BF,SAAA,CAAC,0CACDgF,EAAAA,EAAAA,KAAA,QAAAhF,SAAM,mBAA6B,6CAG3EgF,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAACC,KAAK,2BAA0BvF,UAC1C8E,EAAAA,EAAAA,MAAClF,EAAK,CAACK,cAAc,UAASD,SAAA,EAC5B8E,EAAAA,EAAAA,MAAC3D,EAAQ,CAACE,QAAQ,OAAMrB,SAAA,EACtBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,OAAM/C,SAAC,UACrBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,UAAS/C,SAAC,aACxBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,UAAS/C,SAAC,aACxBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACS,UAAQ,EAACR,QAAQ,WAAU/C,SAAC,iBAIpC8E,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAAAxF,SAAA,EACVgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,OAAM/C,SAAC,sBAG1CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,UAAS/C,SAAC,yBAG7CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,UAAS/C,SAAC,yBAG7CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,WAAU/C,SAAC,0CAS1DgF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGlF,UACX8E,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACjF,UAAU,OAAMF,SAAA,EACrB8E,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAApF,SAAA,EACVgF,EAAAA,EAAAA,KAAA,UAAAhF,SAAQ,eAAmB,KAACgF,EAAAA,EAAAA,KAAA,SAAAhF,SAAO,iBAErC8E,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAArF,SAAA,EACR8E,EAAAA,EAAAA,MAAA,KAAG5E,UAAU,4BAA2BF,SAAA,CAAC,kCACdgF,EAAAA,EAAAA,KAAA,QAAAhF,SAAM,YAAc,0DAG/CgF,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAACC,KAAK,4BAA2BvF,UAC3C8E,EAAAA,EAAAA,MAAClF,EAAK,CAACK,cAAc,UAASD,SAAA,EAC5B8E,EAAAA,EAAAA,MAAC3D,EAAQ,CAAAnB,SAAA,EACPgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,OAAM/C,SAAC,UACrBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,UAAS/C,SAAC,aACxBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACC,QAAQ,UAAS/C,SAAC,aACxBgF,EAAAA,EAAAA,KAAClC,EAAI,CAACS,UAAQ,EAACR,QAAQ,WAAU/C,SAAC,iBAIpC8E,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAAAxF,SAAA,EACVgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,OAAM/C,SAAC,sBAG1CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,UAAS/C,SAAC,yBAG7CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,UAAS/C,SAAC,yBAG7CgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM6C,QAAQ,WAAU/C,SAAC,0CAS1DgF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGlF,UACX8E,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACjF,UAAU,OAAMF,SAAA,EACrB8E,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAApF,SAAA,EACVgF,EAAAA,EAAAA,KAAA,UAAAhF,SAAQ,eAAmB,KAACgF,EAAAA,EAAAA,KAAA,SAAAhF,SAAO,cAErC8E,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAArF,SAAA,EACR8E,EAAAA,EAAAA,MAAA,KAAG5E,UAAU,4BAA2BF,SAAA,CAAC,iCACVgF,EAAAA,EAAAA,KAAA,QAAAhF,SAAM,oBAA8B,gBAEnEgF,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAACC,KAAK,4BAA2BvF,UAC3C8E,EAAAA,EAAAA,MAAClF,EAAK,CAACK,cAAe,EAAED,SAAA,EACtB8E,EAAAA,EAAAA,MAAC3D,EAAQ,CAACE,QAAQ,QAAOrB,SAAA,EACvBgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,gBAAgBC,QAAS,EAAE/C,SAAC,UAGhDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,oBAAoBS,UAAQ,EAACR,QAAS,EAAE/C,SAAC,iBAI/D8E,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAAAxF,SAAA,EACVgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM,kBAAgB,gBAAgB6C,QAAS,EAAE/C,SAAC,sBAGvEgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG1EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG1EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,MAAM,kBAAgB,oBAAoB6C,QAAS,EAAE/C,SAAC,0CASvFgF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGlF,UACX8E,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACjF,UAAU,OAAMF,SAAA,EACrB8E,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAApF,SAAA,EACVgF,EAAAA,EAAAA,KAAA,UAAAhF,SAAQ,eAAmB,KAACgF,EAAAA,EAAAA,KAAA,SAAAhF,SAAO,kBAErC8E,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAArF,SAAA,EACR8E,EAAAA,EAAAA,MAAA,KAAG5E,UAAU,4BAA2BF,SAAA,CAAC,iCACVgF,EAAAA,EAAAA,KAAA,QAAAhF,SAAM,wBAAkC,gBAEvEgF,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAACC,KAAK,4BAA2BvF,UAC3C8E,EAAAA,EAAAA,MAAClF,EAAK,CAACK,cAAe,EAAED,SAAA,EACtB8E,EAAAA,EAAAA,MAAC3D,EAAQ,CAACE,QAAQ,YAAWrB,SAAA,EAC3BgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,gBAAgBC,QAAS,EAAE/C,SAAC,UAGhDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,oBAAoBS,UAAQ,EAACR,QAAS,EAAE/C,SAAC,iBAI/D8E,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAAAxF,SAAA,EACVgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,gBAAgB6C,QAAS,EAAE/C,SAAC,sBAGxEgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG3EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG3EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,oBAAoB6C,QAAS,EAAE/C,SAAC,0CASxFgF,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI,GAAGlF,UACX8E,EAAAA,EAAAA,MAACK,EAAAA,EAAK,CAACjF,UAAU,OAAMF,SAAA,EACrB8E,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAApF,SAAA,EACVgF,EAAAA,EAAAA,KAAA,UAAAhF,SAAQ,eAAmB,KAACgF,EAAAA,EAAAA,KAAA,SAAAhF,SAAO,yBAErC8E,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAArF,SAAA,EACR8E,EAAAA,EAAAA,MAAA,KAAG5E,UAAU,4BAA2BF,SAAA,CAAC,iCACVgF,EAAAA,EAAAA,KAAA,QAAAhF,SAAM,+BAAyC,gBAE9EgF,EAAAA,EAAAA,KAACM,EAAAA,GAAW,CAACC,KAAK,4BAA2BvF,UAC3C8E,EAAAA,EAAAA,MAAClF,EAAK,CAACK,cAAe,EAAED,SAAA,EACtB8E,EAAAA,EAAAA,MAAC3D,EAAQ,CAACE,QAAQ,mBAAkBrB,SAAA,EAClCgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,gBAAgBC,QAAS,EAAE/C,SAAC,UAGhDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,mBAAmBC,QAAS,EAAE/C,SAAC,aAGnDgF,EAAAA,EAAAA,KAAClC,EAAI,CAAC,gBAAc,oBAAoBS,UAAQ,EAACR,QAAS,EAAE/C,SAAC,iBAI/D8E,EAAAA,EAAAA,MAACU,EAAAA,EAAW,CAAAxF,SAAA,EACVgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,gBAAgB6C,QAAS,EAAE/C,SAAC,sBAGxEgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG3EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,mBAAmB6C,QAAS,EAAE/C,SAAC,yBAG3EgF,EAAAA,EAAAA,KAACxB,EAAS,CAACtD,UAAU,OAAO,kBAAgB,oBAAoB6C,QAAS,EAAE/C,SAAC,2C,gGC1LjFmF,GAAQtF,EAAAA,EAAAA,aACnB,SAACC,EAAiEC,G,MAA/DC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAEuF,EAAK3F,EAAA2F,MAAEC,EAAW5F,EAAA4F,YAAEC,EAAS7F,EAAA6F,UAAKrE,GAAIC,EAAAA,EAAAA,IAAAzB,EAA7D,4DACC,OACEa,EAAAA,cACE,OAAAiB,EAAAA,EAAAA,IAAA,CAAA1B,WAAWY,EAAAA,EAAAA,GACT,QAAMR,EAAA,GAEJA,EAAC,MAAMuB,OAAA4D,IAAUA,EACjBnF,EAAC,QAAQuB,OAAA8D,IAAcA,EACvBrF,EAAC,WAAWuB,OAAA6D,IAAgBA,EAAW,GAEzCxF,IAEEoB,EACJ,CAAAvB,IAAKA,IAEJC,EAGP,IAGFmF,EAAMpE,UAAY,CAChBf,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXyE,MAAOG,EAAAA,GACPF,YAAaE,EAAAA,GACbD,UAAW3E,IAAAA,QAGbmE,EAAMjE,YAAc,O,uFCpDPmE,GAAYxF,EAAAA,EAAAA,aACvB,SAACC,EAAkCC,GAAhC,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAKoB,GAA1BC,EAAAA,EAAAA,IAAAzB,EAAA,0BACC,OACEa,EAAAA,cAAA,OAAAiB,EAAAA,EAAAA,IAAA,CAAK1B,WAAWY,EAAAA,EAAAA,GAAW,YAAaZ,IAAgBoB,EAAI,CAAEvB,IAAKA,IAChEC,EAGP,IAGFqF,EAAUtE,UAAY,CACpBf,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,QAGbqE,EAAUnE,YAAc,W,uFCTXkE,GAA0EvF,EAAAA,EAAAA,aAGrF,SAACC,EAAyDC,GAAvD,IAAAC,EAAQF,EAAAE,SAAEM,EAAqBR,EAAA+F,GAAjBC,OAAY,IAAAxF,EAAA,MAAKA,EAAEJ,EAASJ,EAAAI,UAAKoB,GAAIC,EAAAA,EAAAA,IAAAzB,EAArD,+BACD,OACEa,EAAAA,cAACmF,GAASlE,EAAAA,EAAAA,IAAA,CAAC1B,WAAWY,EAAAA,EAAAA,GAAW,cAAeZ,IAAgBoB,EAAI,CAAEvB,IAAKA,IACxEC,EAGP,IAEAoF,EAAYrE,UAAY,CACtB8E,GAAI7E,IAAAA,YACJhB,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,QAGboE,EAAYlE,YAAc,a,uFCuBpB6E,EAAc,CAClB,MACA,KACA,KACA,KACA,KACA,MAGWd,GAAOpF,EAAAA,EAAAA,aAClB,SAACC,EAAkCC,GAAhC,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAKoB,GAA1BC,EAAAA,EAAAA,IAAAzB,EAAA,0BACOkG,EAAiC,GAmCvC,OAjCAD,EAAYE,SAAQ,SAACC,GACnB,IAAMC,EAAa7E,EAAK4E,UACjB5E,EAAK4E,GAEZ,IAAME,EAAe,OAAPF,EAAc,GAAK,IAAIrE,OAAAqE,GAEX,kBAAfC,GAAiD,kBAAfA,GAC3CH,EAAqBK,KAAK,MAAAxE,OAAMuE,EAAS,KAAAvE,OAAAsE,IAGjB,mBAAfA,GACTH,EAAqBK,KAAK,MAAAxE,OAAMuE,IAG9BD,GAAoC,kBAAfA,IACQ,kBAApBA,EAAWG,MAAgD,kBAApBH,EAAWG,MAC3DN,EAAqBK,KAAK,MAAMxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWG,OAGvB,mBAApBH,EAAWG,MACpBN,EAAqBK,KAAK,MAAAxE,OAAMuE,IAGF,kBAArBD,EAAWI,OAAkD,kBAArBJ,EAAWI,OAC5DP,EAAqBK,KAAK,QAAQxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWI,QAGvB,kBAAtBJ,EAAWK,QACpBR,EAAqBK,KAAK,SAASxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWK,SAG7D,IAGE7F,EAAAA,cAAA,OAAAiB,EAAAA,EAAAA,IAAA,CACE1B,WAAWY,EAAAA,EAAAA,GACTkF,EAAqBS,OAAS,EAAIT,EAAuB,MACzD9F,IAEEoB,EAAI,CACRvB,IAAKA,IAEJC,EAGP,IAGIsG,EAAOtF,IAAAA,UAAoB,CAC/BA,IAAAA,KACAA,IAAAA,OACAA,IAAAA,OACAA,IAAAA,MAAgB,CAAC,WAGb0F,EAAM1F,IAAAA,UAAoB,CAC9BsF,EACAtF,IAAAA,MAAgB,CACdsF,KAAMA,EACNE,OAAQxF,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAC/CuF,MAAOvF,IAAAA,UAAoB,CACzBA,IAAAA,MAAgB,CAAC,QAAS,SAC1BA,IAAAA,OACAA,IAAAA,aAKNiE,EAAKlE,UAAY,CACff,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXkE,GAAIwB,EACJC,GAAID,EACJE,GAAIF,EACJG,GAAIH,EACJI,GAAIJ,EACJK,IAAKL,GAGPzB,EAAK/D,YAAc,M,uFC/Fb6E,EAAc,CAClB,MACA,KACA,KACA,KACA,KACA,MAGWhB,GAAOlF,EAAAA,EAAAA,aAClB,SAACC,EAAkCC,GAAhC,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAKoB,GAA1BC,EAAAA,EAAAA,IAAAzB,EAAA,0BACOkG,EAAiC,GA2BvC,OAzBAD,EAAYE,SAAQ,SAACC,GACnB,IAAMC,EAAa7E,EAAK4E,UACjB5E,EAAK4E,GAEZ,IAAME,EAAe,OAAPF,EAAc,GAAK,IAAIrE,OAAAqE,GAEX,kBAAfC,IACLA,EAAWa,MACbhB,EAAqBK,KAAK,WAAWxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWa,OAG1B,kBAAtBb,EAAWc,QACpBjB,EAAqBK,KAAK,IAAIxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWc,SAGlB,kBAAvBd,EAAWe,SACpBlB,EAAqBK,KAAK,KAAKxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWe,UAGnB,kBAAvBf,EAAWgB,SACpBnB,EAAqBK,KAAK,KAAKxE,OAAAuE,EAAS,KAAAvE,OAAAsE,EAAWgB,UAGzD,IAGExG,EAAAA,cAAA,OAAAiB,EAAAA,EAAAA,IAAA,CAAK1B,WAAWY,EAAAA,EAAAA,GAAW,MAAOkF,EAAsB9F,IAAgBoB,EAAI,CAAEvB,IAAKA,IAChFC,EAGP,IAGIkG,EAAKlF,IAAAA,MAAgB,CACzBgG,KAAMhG,IAAAA,UAAoB,CAACA,IAAAA,MAAgB,CAAC,SAAUA,IAAAA,OAAkBA,IAAAA,SACxEiG,OAAQjG,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAC/CkG,QAASlG,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAChDmG,QAASnG,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,WAGlD+D,EAAKhE,UAAY,CACff,SAAUgB,IAAAA,KACVd,UAAWc,IAAAA,OACXkE,GAAIgB,EACJS,GAAIT,EACJU,GAAIV,EACJW,GAAIX,EACJY,GAAIZ,EACJa,IAAKb,GAGPnB,EAAK7D,YAAc,M,kCCtHb,IAAAuD,EAAmC,SAAC2C,GACxC,IAAKA,EACH,OAAO,EAIL,IAAAtH,EAA0CuH,OAAOC,iBAAiBF,GAAhEG,EAAkBzH,EAAAyH,mBAAEC,EAAe1H,EAAA0H,gBAEnCC,EAA0BC,OAAOC,WAAWJ,GAC5CK,EAAuBF,OAAOC,WAAWH,GAG/C,OAAKC,GAA4BG,GAKjCL,EAAqBA,EAAmBM,MAAM,KAAK,GACnDL,EAAkBA,EAAgBK,MAAM,KAAK,GAEyC,KAA9EH,OAAOC,WAAWJ,GAAsBG,OAAOC,WAAWH,KAPzD,CAQX,C","sources":["../node_modules/@coreui/react/src/components/tabs/CTabs.tsx","../node_modules/@coreui/react/src/components/tabs/CTabList.tsx","../node_modules/@coreui/react/src/components/tabs/CTab.tsx","../node_modules/@coreui/react/src/components/tabs/CTabPanel.tsx","views/base/tabs/Tabs.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/utils/getTransitionDurationFromElement.ts"],"sourcesContent":["import React, { createContext, forwardRef, HTMLAttributes, useEffect, useId, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CTabsProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * The active item key.\n   */\n  activeItemKey: number | string\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The callback is fired when the active tab changes.\n   */\n  onChange?: (value: number | string) => void\n}\n\nexport interface TabsContextProps {\n  _activeItemKey?: number | string\n  setActiveItemKey: React.Dispatch<React.SetStateAction<number | string | undefined>>\n  id?: string\n}\n\nexport const TabsContext = createContext({} as TabsContextProps)\n\nexport const CTabs = forwardRef<HTMLDivElement, CTabsProps>(\n  ({ children, activeItemKey, className, onChange }, ref) => {\n    const id = useId()\n    const [_activeItemKey, setActiveItemKey] = useState(activeItemKey)\n\n    useEffect(() => {\n      _activeItemKey && onChange && onChange(_activeItemKey)\n    }, [_activeItemKey])\n\n    return (\n      <TabsContext.Provider value={{ _activeItemKey, setActiveItemKey, id }}>\n        <div className={classNames('tabs', className)} ref={ref}>\n          {children}\n        </div>\n      </TabsContext.Provider>\n    )\n  },\n)\n\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nCTabs.displayName = 'CTabs'\n","import React, { forwardRef, HTMLAttributes, KeyboardEvent, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { getNextActiveElement } from '../../utils'\n\nexport interface CTabListProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Specify a layout type for component.\n   */\n  layout?: 'fill' | 'justified'\n  /**\n   * Set the nav variant to tabs or pills.\n   */\n  variant?: 'pills' | 'tabs' | 'underline' | 'underline-border'\n}\n\nexport const CTabList = forwardRef<HTMLDivElement, CTabListProps>(\n  ({ children, className, layout, variant, ...rest }, ref) => {\n    const tabListRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, tabListRef)\n\n    const handleKeydown = (event: KeyboardEvent<HTMLDivElement>) => {\n      if (\n        tabListRef.current !== null &&\n        (event.key === 'ArrowDown' ||\n          event.key === 'ArrowUp' ||\n          event.key === 'ArrowLeft' ||\n          event.key === 'ArrowRight' ||\n          event.key === 'Home' ||\n          event.key === 'End')\n      ) {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        // eslint-disable-next-line unicorn/prefer-spread\n        const items: HTMLElement[] = Array.from(\n          tabListRef.current.querySelectorAll('.nav-link:not(.disabled):not(:disabled)'),\n        )\n\n        let nextActiveElement\n\n        if (event.key === 'Home' || event.key === 'End') {\n          nextActiveElement = event.key === 'End' ? items.at(-1) : items[0]\n        } else {\n          nextActiveElement = getNextActiveElement(\n            items,\n            target,\n            event.key === 'ArrowDown' || event.key === 'ArrowRight',\n            true,\n          )\n        }\n\n        if (nextActiveElement) {\n          nextActiveElement.focus({ preventScroll: true })\n        }\n      }\n    }\n\n    return (\n      <div\n        className={classNames(\n          'nav',\n          {\n            [`nav-${layout}`]: layout,\n            [`nav-${variant}`]: variant,\n          },\n          className,\n        )}\n        role=\"tablist\"\n        onKeyDown={handleKeydown}\n        ref={forkedRef}\n        {...rest}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCTabList.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  layout: PropTypes.oneOf(['fill', 'justified']),\n  variant: PropTypes.oneOf(['pills', 'tabs', 'underline', 'underline-border']),\n}\n\nCTabList.displayName = 'CTabList'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { TabsContext } from './CTabs'\n\nexport interface CTabProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n}\n\nexport const CTab = forwardRef<HTMLButtonElement, CTabProps>(\n  ({ children, className, itemKey, ...rest }, ref) => {\n    const { _activeItemKey, setActiveItemKey, id } = useContext(TabsContext)\n\n    const isActive = () => itemKey === _activeItemKey\n\n    return (\n      <button\n        className={classNames(\n          'nav-link',\n          {\n            active: isActive(),\n          },\n          className,\n        )}\n        id={`${id}${itemKey}-tab`}\n        onClick={() => setActiveItemKey(itemKey)}\n        onFocus={() => setActiveItemKey(itemKey)}\n        role=\"tab\"\n        tabIndex={isActive() ? 0 : -1}\n        type=\"button\"\n        aria-controls={`${id}${itemKey}-tab-pane`}\n        aria-selected={isActive()}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </button>\n    )\n  },\n)\n\nCTab.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n}\n\nCTab.displayName = 'CTab'\n","import React, { HTMLAttributes, forwardRef, useContext, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { TabsContext } from './CTabs'\nimport { useForkedRef } from '../../hooks'\nimport { getTransitionDurationFromElement } from '../../utils'\n\nexport interface CTabPanelProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Enable fade in and fade out transition.\n   */\n  transition?: boolean\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CTabPanel = forwardRef<HTMLDivElement, CTabPanelProps>(\n  ({ children, className, itemKey, onHide, onShow, transition = true, visible, ...rest }, ref) => {\n    const { _activeItemKey, id } = useContext(TabsContext)\n\n    const tabPaneRef = useRef()\n    const forkedRef = useForkedRef(ref, tabPaneRef)\n\n    const [_visible, setVisible] = useState(visible || _activeItemKey === itemKey)\n\n    useEffect(() => {\n      visible !== undefined && setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(_activeItemKey === itemKey)\n    }, [_activeItemKey])\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={tabPaneRef}\n        onEnter={onShow}\n        onExit={onHide}\n        timeout={tabPaneRef.current ? getTransitionDurationFromElement(tabPaneRef.current) : 0}\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'tab-pane',\n              {\n                active: _visible,\n                fade: transition,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            id={`${id}${itemKey}-tab-pane`}\n            role=\"tabpanel\"\n            aria-labelledby={`${id}${itemKey}-tab`}\n            tabIndex={0}\n            ref={forkedRef}\n            {...rest}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCTabPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCTabPanel.displayName = 'CTabPanel'\n","import React from 'react'\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CTab,\n  CTabContent,\n  CTabList,\n  CTabPanel,\n  CTabs,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst Navs = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Tabs</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              The basic React tabs example uses the <code>variant=&#34;tabs&#34;</code> props to\n              generate a tabbed interface.\n            </p>\n            <DocsExample href=\"components/tabs/#example\">\n              <CTabs activeItemKey=\"profile\">\n                <CTabList variant=\"tabs\">\n                  <CTab itemKey=\"home\">Home</CTab>\n                  <CTab itemKey=\"profile\">Profile</CTab>\n                  <CTab itemKey=\"contact\">Contact</CTab>\n                  <CTab disabled itemKey=\"disabled\">\n                    Disabled\n                  </CTab>\n                </CTabList>\n                <CTabContent>\n                  <CTabPanel className=\"p-3\" itemKey=\"home\">\n                    Home tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"profile\">\n                    Profile tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"contact\">\n                    Contact tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"disabled\">\n                    Disabled tab content\n                  </CTabPanel>\n                </CTabContent>\n              </CTabs>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Tabs</strong> <small>Unstyled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              If you don’t provide the <code>variant</code> prop, the component will default to a\n              basic style.\n            </p>\n            <DocsExample href=\"components/tabs/#unstyled\">\n              <CTabs activeItemKey=\"profile\">\n                <CTabList>\n                  <CTab itemKey=\"home\">Home</CTab>\n                  <CTab itemKey=\"profile\">Profile</CTab>\n                  <CTab itemKey=\"contact\">Contact</CTab>\n                  <CTab disabled itemKey=\"disabled\">\n                    Disabled\n                  </CTab>\n                </CTabList>\n                <CTabContent>\n                  <CTabPanel className=\"p-3\" itemKey=\"home\">\n                    Home tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"profile\">\n                    Profile tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"contact\">\n                    Contact tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" itemKey=\"disabled\">\n                    Disabled tab content\n                  </CTabPanel>\n                </CTabContent>\n              </CTabs>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Tabs</strong> <small>Pills</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Take that same code, but use <code>variant=&#34;pills&#34;</code> instead:\n            </p>\n            <DocsExample href=\"components/tabs/#unstyled\">\n              <CTabs activeItemKey={2}>\n                <CTabList variant=\"pills\">\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\n                    Home\n                  </CTab>\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\n                    Profile\n                  </CTab>\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\n                    Contact\n                  </CTab>\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\n                    Disabled\n                  </CTab>\n                </CTabList>\n                <CTabContent>\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\n                    Home tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\n                    Profile tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\n                    Contact tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\n                    Disabled tab content\n                  </CTabPanel>\n                </CTabContent>\n              </CTabs>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Tabs</strong> <small>Underline</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Take that same code, but use <code>variant=&#34;underline&#34;</code> instead:\n            </p>\n            <DocsExample href=\"components/tabs/#unstyled\">\n              <CTabs activeItemKey={2}>\n                <CTabList variant=\"underline\">\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\n                    Home\n                  </CTab>\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\n                    Profile\n                  </CTab>\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\n                    Contact\n                  </CTab>\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\n                    Disabled\n                  </CTab>\n                </CTabList>\n                <CTabContent>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\n                    Home tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\n                    Profile tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\n                    Contact tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\n                    Disabled tab content\n                  </CTabPanel>\n                </CTabContent>\n              </CTabs>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Tabs</strong> <small>Underline border</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Take that same code, but use <code>variant=&#34;underline-border&#34;</code> instead:\n            </p>\n            <DocsExample href=\"components/tabs/#unstyled\">\n              <CTabs activeItemKey={2}>\n                <CTabList variant=\"underline-border\">\n                  <CTab aria-controls=\"home-tab-pane\" itemKey={1}>\n                    Home\n                  </CTab>\n                  <CTab aria-controls=\"profile-tab-pane\" itemKey={2}>\n                    Profile\n                  </CTab>\n                  <CTab aria-controls=\"contact-tab-pane\" itemKey={3}>\n                    Contact\n                  </CTab>\n                  <CTab aria-controls=\"disabled-tab-pane\" disabled itemKey={4}>\n                    Disabled\n                  </CTab>\n                </CTabList>\n                <CTabContent>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"home-tab-pane\" itemKey={1}>\n                    Home tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"profile-tab-pane\" itemKey={2}>\n                    Profile tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"contact-tab-pane\" itemKey={3}>\n                    Contact tab content\n                  </CTabPanel>\n                  <CTabPanel className=\"py-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={4}>\n                    Disabled tab content\n                  </CTabPanel>\n                </CTabContent>\n              </CTabs>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Navs\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","const getTransitionDurationFromElement = (element: HTMLElement) => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000\n}\n\nexport default getTransitionDurationFromElement\n"],"names":["TabsContext","createContext","CTabs","forwardRef","_a","ref","children","activeItemKey","className","onChange","id","useId","_b","useState","_activeItemKey","setActiveItemKey","useEffect","React","Provider","value","classNames","propTypes","PropTypes","isRequired","displayName","CTabList","layout","variant","rest","__rest","tabListRef","useRef","forkedRef","useForkedRef","__assign","concat","role","onKeyDown","event","current","key","preventDefault","target","items","Array","from","querySelectorAll","nextActiveElement","at","getNextActiveElement","focus","preventScroll","CTab","itemKey","useContext","isActive","active","onClick","onFocus","tabIndex","type","disabled","CTabPanel","onHide","onShow","transition","visible","_c","tabPaneRef","_d","_visible","setVisible","undefined","Transition","in","nodeRef","onEnter","onExit","timeout","getTransitionDurationFromElement","state","fade","show","Navs","_jsxs","CRow","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","CTabContent","color","textBgColor","textColor","colorPropType","as","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY","element","window","getComputedStyle","transitionDuration","transitionDelay","floatTransitionDuration","Number","parseFloat","floatTransitionDelay","split"],"sourceRoot":""}